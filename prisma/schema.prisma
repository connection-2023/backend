generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  //고유 id
  id Int @id @default(autoincrement())
  //지역 id
  regionId Int
  //사용자 닉네임
  nickname String @unique @db.VarChar(30)
  //프로필 공개 여부(open: true, close: false)
  isProfileOpen Boolean @db.Boolean @default(false)
  //핸드폰 번호
  phoneNumber String? @unique @db.VarChar(11)
  //상세주소
  detailAddress String? @db.VarChar(255)
  //성별
  gender Int? @db.SmallInt
  //생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)
  //수정일자
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt DateTime? @db.Timestamp(6)
  region Region @relation(fields: [regionId], references: [id], onDelete: Cascade)
  userProfileImage UserProfileImage?
  lecturer Lecturer?
}

model UserProfileImage {
  //고유 id
  id Int @id @default(autoincrement())
  //user id
  userId Int @unique
  //이미지 url
  image_url String @db.VarChar(255)
  users Users @relation(fields: [userId],references: [id])
}

model Region {
  //고유 id
  id Int @id @default(autoincrement())
  //시/도
  administrativeDistrict String @db.VarChar(19)
  //시/군/구
  district String @db.VarChar(10)
  users Users[]
  lectures Lecture[]
}

model Lecturer {
  //고유 id
  id Int @id @default(autoincrement())
  //user id
  userId Int @unique
  //개인 사이트 주소
  siteUrl String @db.VarChar(255)
  //연락 가능 시간
  workTime String @db.VarChar(11)
  //추가 설명
  description String @db.VarChar(255)
  //평점
  stars Int @default(0)
  //리뷰 수
  reviewCount Int @default(0)
  //생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)
  //수정일자
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt DateTime? @db.Timestamp(6)
  users Users @relation(fields: [userId],references: [id])
  lectures Lecture[]
}

model Lecture {
  //고유 id
  id Int @id @default(autoincrement())
  //강사 id
  danceLecturerId Int
  //지역 id
  regionId Int
  //강의 종류 id
  lectureTypeId Int
  //춤 장르 id
  danceCategoryId Int
  //강의명
  title String @unique @db.VarChar(30)
  //상세 주소
  detailAddress String @db.VarChar(30)
  //강의 시간
  duration Int @db.Integer
  //난이도
  difficultLevel String @db.VarChar(5)
  //최소 정원
  minCapacity Int @db.Integer
  //최대 정원
  maxCapacity Int? @db.Integer
  //그룹 여부
  isGroup Boolean @db.Boolean
  //강의 예약 마감일
  reservationDeadline DateTime @db.Date
  //예약 설명
  reservationComment String? @db.VarChar(255)
  //가격
  price Int @db.Integer
  //선금
  noShowDeposit Int? @db.Integer
  //리뷰 수
  reviewCount Int @default(0) @db.Integer
  //평점
  stars Int @default(0) @db.Integer
  //생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)
  //수정일자
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt DateTime? @db.Timestamp(6)
  lecturer Lecturer @relation(fields: [danceLecturerId],references: [id])
  region Region @relation(fields: [regionId],references: [id])
  lectureType LectureType @relation(fields: [lectureTypeId],references: [id])
  danceCategory DanceCategory @relation(fields: [danceCategoryId],references: [id])
  lectureGroup LectureGroup[]
}

model LectureGroup {
  //고유 id
  id Int @id @default(autoincrement())
  //강의 id
  lectureId Int
  //그룹 최소 정원
  groupMinCapacity Int @db.Integer
  //그룹 최대 정원
  groupMaxCapacity Int @db.Integer
  lecture Lecture @relation(fields: [lectureId],references: [id])
}

model DanceCategory {
  //고유 id
  id Int @id @default(autoincrement())
  //장르(hiphop,locking)
  genre String
  lectures Lecture[]
}

model LectureType {
  //고유 id
  id Int @id @default(autoincrement())
  //강의 종류(dance,drawing)
  name String
  lectures Lecture[]
}