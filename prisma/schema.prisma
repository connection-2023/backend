generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  //고유 id
  id               Int               @id @default(autoincrement())
  //지역 id
  regionId         Int
  //사용자 닉네임
  nickname         String            @unique @db.VarChar(30)
  //프로필 공개 여부(open: true, close: false)
  isProfileOpen    Boolean           @default(false) @db.Boolean
  //핸드폰 번호
  phoneNumber      String?           @unique @db.VarChar(11)
  //상세주소
  detailAddress    String?           @db.VarChar(255)
  //성별
  gender           Int?              @db.SmallInt
  //생성일자
  createdAt        DateTime          @default(now()) @db.Timestamp(6)
  //수정일자
  updatedAt        DateTime          @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt        DateTime?         @db.Timestamp(6)
  region           Region            @relation(fields: [regionId], references: [id], onDelete: Cascade)
  userProfileImage UserProfileImage?
  lecturer         Lecturer?
  lectureReview    LectureReview[]
  lecturerReview   LecturerReview[]
  likedLecture     LikedLecture[]
  dailySmsUsage    DailySmsUsage?
}

model UserProfileImage {
  //고유 id
  id        Int    @id @default(autoincrement())
  //user id
  userId    Int    @unique
  //이미지 url
  image_url String @db.VarChar(255)
  users     Users  @relation(fields: [userId], references: [id])
}

model Region {
  //고유 id
  id                     Int       @id @default(autoincrement())
  //시/도
  administrativeDistrict String    @db.VarChar(19)
  //시/군/구
  district               String?   @db.VarChar(10)
  users                  Users[]
  lecture                Lecture[]
}

model Lecturer {
  //고유 id
  id             Int              @id @default(autoincrement())
  //user id
  userId         Int              @unique
  //강사nickname
  nickname       String           @db.VarChar(11)
  //개인 사이트 주소
  siteUrl        String           @db.VarChar(255)
  //연락 가능 시간
  workTime       String           @db.VarChar(11)
  //추가 설명
  description    String           @db.VarChar(255)
  //평점
  stars          Int              @default(0)
  //리뷰 수
  reviewCount    Int              @default(0)
  //생성일자
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  //수정일자
  updatedAt      DateTime         @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt      DateTime?        @db.Timestamp(6)
  users          Users            @relation(fields: [userId], references: [id])
  lecture        Lecture[]
  lecturerReview LecturerReview[]
}

model Lecture {
  //고유 id
  id                     Int                      @id @default(autoincrement())
  //강사 id
  lecturerId             Int
  //지역 id
  regionId               Int
  //강의 종류 id
  lectureTypeId          Int
  //춤 장르 id
  danceCategoryId        Int
  //강의 형식 id
  lectureMethodId        Int
  //강의명
  title                  String                   @unique @db.VarChar(30)
  //강의 소개
  lectureIntroduction    String                   @db.VarChar(500)
  //커리큘럼
  curriculum             String                   @db.Text
  //상세 주소
  detailAddress          String                   @db.VarChar(30)
  //강의 시간
  duration               Int                      @db.Integer
  //난이도
  difficultyLevel        String                   @db.VarChar(5)
  //최소 정원
  minCapacity            Int                      @db.Integer
  //최대 정원
  maxCapacity            Int?                     @db.Integer
  //강의 예약 마감일
  reservationDeadline    DateTime                 @db.Date
  //예약 설명
  reservationComment     String?                  @db.VarChar(255)
  //가격
  price                  Int                      @db.Integer
  //선금
  noShowDeposit          Int?                     @db.Integer
  //리뷰 수
  reviewCount            Int                      @default(0) @db.Integer
  //평점
  stars                  Int                      @default(0) @db.Integer
  //활성여부
  isActive               Boolean                  @default(true) @db.Boolean
  //생성일자
  createdAt              DateTime                 @default(now()) @db.Timestamp(6)
  //수정일자
  updatedAt              DateTime                 @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt              DateTime?                @db.Timestamp(6)
  lecturer               Lecturer                 @relation(fields: [lecturerId], references: [id])
  region                 Region                   @relation(fields: [regionId], references: [id])
  lectureType            LectureType              @relation(fields: [lectureTypeId], references: [id])
  danceCategory          DanceCategory            @relation(fields: [danceCategoryId], references: [id])
  lectureMethod          LectureMethod            @relation(fields: [lectureMethodId], references: [id])
  lectureReview          LectureReview[]
  likedLecture           LikedLecture[]
  lecturenotification    LectureNotification[]
  lectureImage           LectureImage[]
  lectureCurriculumImage LectureCurriculumImage[]
}

model DanceCategory {
  //고유 id
  id      Int       @id @default(autoincrement())
  //장르(hiphop,locking)
  genre   String
  lecture Lecture[]
}

model LectureType {
  //고유 id
  id      Int       @id @default(autoincrement())
  //강의 종류(dance,drawing)
  name    String
  lecture Lecture[]
}

model LectureReview {
  //고유 id
  id          Int     @id @default(autoincrement())
  //강의 id
  lectureId   Int
  //유저 id
  userId      Int
  //별점
  stars       Int     @db.Integer
  //후기
  description String? @db.VarChar(255)
  lecture     Lecture @relation(fields: [lectureId], references: [id])
  users       Users   @relation(fields: [userId], references: [id])
}

model LecturerReview {
  //고유 id
  id          Int      @id @default(autoincrement())
  //강사 id
  lecturerId  Int
  //유저 id
  userId      Int
  //별점
  stars       Int      @db.Integer
  //후기
  description String?  @db.VarChar(255)
  lecturer    Lecturer @relation(fields: [lecturerId], references: [id])
  users       Users    @relation(fields: [userId], references: [id])
}

model DailySmsUsage {
  //고유 id
  id             Int @id @default(autoincrement())
  userId         Int @unique
  dailySentCount Int @default(1) @db.Integer

  users Users @relation(fields: [userId], references: [id])
}

model LectureMethod {
  //고유 id
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(255)
  lecture Lecture[]
}

model LikedLecture {
  //고유 id
  id        Int     @id @default(autoincrement())
  //강의 id
  lectureId Int
  //유저 id
  userId    Int
  lecture   Lecture @relation(fields: [lectureId], references: [id])
  user      Users   @relation(fields: [userId], references: [id])

  @@unique([lectureId, userId])
}

model LectureNotification {
  //고유 id
  id           Int       @id @default(autoincrement())
  //강의 id
  lectureId    Int
  //공지사항
  notification String    @db.VarChar(200)
  //수정일자
  updatedAt    DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt    DateTime? @db.Timestamp(6)
  lecture      Lecture   @relation(fields: [lectureId], references: [id])
}

model LectureCurriculumImage {
  //고유 id
  id        Int     @id @default(autoincrement())
  //강의 id
  lectureId Int
  lecture   Lecture @relation(fields: [lectureId], references: [id])
}

model LectureImage {
  //고유 id
  id        Int     @id @default(autoincrement())
  //강의 id
  lectureId Int
  lecture   Lecture @relation(fields: [lectureId], references: [id])
}
