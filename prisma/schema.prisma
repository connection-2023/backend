generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  //고유 id
  id               Int               @id @default(autoincrement())
  uuid             String            @default(uuid())
  //이름
  name             String            @db.VarChar(10)
  //사용자 닉네임
  nickname         String            @unique @db.VarChar(30)
  //사용 이메일
  email            String            @unique
  //프로필 공개 여부(open: true, close: false)
  isProfileOpen    Boolean           @default(false) @db.Boolean
  //핸드폰 번호
  phoneNumber      String?           @unique @db.VarChar(11)
  //성별
  gender           Int?              @db.SmallInt
  //생성일자
  createdAt        DateTime          @default(now()) @db.Timestamp(6)
  //수정일자
  updatedAt        DateTime          @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt        DateTime?         @db.Timestamp(6)
  auth             Auth?
  userProfileImage UserProfileImage?
  lecturer         Lecturer?
  lectureReview    LectureReview[]
  lecturerReview   LecturerReview[]
  likedLecture     LikedLecture[]
  dailySmsUsage    DailySmsUsage?
  userCoupon       UserCoupon[]
}

model UserProfileImage {
  //고유 id
  id       Int     @id @default(autoincrement())
  //user id
  userId   Int     @unique
  //이미지 url
  imageUrl String? @db.VarChar(255)
  users    Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Region {
  //고유 id
  id                       Int                        @id @default(autoincrement())
  //시/도
  administrativeDistrict   String                     @db.VarChar(19)
  //시/군/구
  district                 String?                    @db.VarChar(10)
  lecturerRegion           LecturerRegion[]
  lectureToRegion          LectureToRegion[]
  temporaryLectureToRegion TemporaryLectureToRegion[]
}

model Lecturer {
  //고유 id
  id                      Int                       @id @default(autoincrement())
  //user id
  userId                  Int                       @unique
  //강사nickname
  nickname                String                    @unique @db.VarChar(11)
  email                   String
  phoneNumber             String
  //개인 사이트 주소
  youtubeUrl              String?
  instagramUrl            String?
  homepageUrl             String?
  //강사 소속 팀, 크루
  affiliation             String?
  //강사 소개
  introduction            String
  //강사 경력,경험
  experience              String?
  //평점
  stars                   Int                       @default(0)
  //리뷰 수
  reviewCount             Int                       @default(0)
  //생성일자
  createdAt               DateTime                  @default(now()) @db.Timestamp(6)
  //수정일자
  updatedAt               DateTime                  @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt               DateTime?                 @db.Timestamp(6)
  users                   Users                     @relation(fields: [userId], references: [id])
  lecture                 Lecture[]
  temporaryLecture        TemporaryLecture[]
  lecturerReview          LecturerReview[]
  lectureCoupon           LectureCoupon[]
  //강사 활동 지역
  lecturerRegion          LecturerRegion[]
  //강사 강의 장르
  lecturerDanceGenre      LecturerDanceGenre[]
  //강사가 보여주고싶은 사이트들
  lecturerWebsiteUrl      LecturerWebsiteUrl[]
  lecturerProfileImageUrl LecturerProfileImageUrl[]
}

model Lecture {
  //고유 id
  id                  Int                   @id @default(autoincrement())
  //강사 id
  lecturerId          Int
  //강의 종류 id ex)dance
  lectureTypeId       Int
  //강의 형식 id ex)원데이,정기
  lectureMethodId     Int
  //강의명
  title               String                @db.VarChar(30)
  //강의 소개
  introduction        String?               @db.VarChar(500)
  //커리큘럼
  curriculum          String                @db.Text
  //상세 주소
  detailAddress       String?               @db.VarChar(30)
  //강의 시간
  duration            Int                   @db.Integer
  //난이도
  difficultyLevel     String                @db.VarChar(5)
  //최소 정원
  minCapacity         Int?                  @db.Integer
  //최대 정원
  maxCapacity         Int?                  @db.Integer
  //강의 예약 마감일
  reservationDeadline DateTime              @db.Date
  //예약 설명
  reservationComment  String?               @db.VarChar(255)
  //가격
  price               Int                   @db.Integer
  //선금
  noShowDeposit       Int?                  @db.Integer
  //리뷰 수
  reviewCount         Int                   @default(0) @db.Integer
  //평점
  stars               Int                   @default(0) @db.Integer
  //활성여부
  isActive            Boolean               @default(true) @db.Boolean
  //생성일자
  createdAt           DateTime              @default(now()) @db.Timestamp(6)
  //수정일자
  updatedAt           DateTime              @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt           DateTime?             @db.Timestamp(6)
  lecturer            Lecturer              @relation(fields: [lecturerId], references: [id])
  lectureType         LectureType           @relation(fields: [lectureTypeId], references: [id])
  lectureMethod       LectureMethod         @relation(fields: [lectureMethodId], references: [id])
  lectureReview       LectureReview[]
  likedLecture        LikedLecture[]
  lectureNotification LectureNotification[]
  lectureImage        LectureImage[]
  lectureCouponTarget LectureCouponTarget[]
  lectureSchedule     LectureSchedule[]
  lectureToRegion     LectureToRegion[]
  lectureToDanceGenre LectureToDanceGenre[]
  lectureHoliday      LectureHoliday[]
}

model DanceCategory {
  //고유 id
  id                           Int                            @id @default(autoincrement())
  //장르(hiphop,locking)
  genre                        String
  lecturerDanceGenre           LecturerDanceGenre[]
  lectureToDanceGenre          LectureToDanceGenre[]
  temporaryLectureToDanceGenre TemporaryLectureToDanceGenre[]
}

model LectureType {
  //고유 id
  id               Int                @id @default(autoincrement())
  //강의 종류(dance,drawing)
  name             String
  lecture          Lecture[]
  temporaryLecture TemporaryLecture[]
}

model LectureReview {
  //고유 id
  id          Int     @id @default(autoincrement())
  //강의 id
  lectureId   Int
  //유저 id
  userId      Int
  //별점
  stars       Int     @db.Integer
  //후기
  description String? @db.VarChar(255)
  lecture     Lecture @relation(fields: [lectureId], references: [id])
  users       Users   @relation(fields: [userId], references: [id])
}

model LecturerReview {
  //고유 id
  id          Int      @id @default(autoincrement())
  //강사 id
  lecturerId  Int
  //유저 id
  userId      Int
  //별점
  stars       Int      @db.Integer
  //후기
  description String?  @db.VarChar(255)
  lecturer    Lecturer @relation(fields: [lecturerId], references: [id])
  users       Users    @relation(fields: [userId], references: [id])
}

model DailySmsUsage {
  //고유 id
  id             Int @id @default(autoincrement())
  userId         Int @unique
  dailySentCount Int @default(0) @db.Integer

  users Users @relation(fields: [userId], references: [id])
}

model LectureMethod {
  //고유 id
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  lecture          Lecture[]
  temporaryLecture TemporaryLecture[]
}

model LikedLecture {
  //고유 id
  id        Int     @id @default(autoincrement())
  //강의 id
  lectureId Int
  //유저 id
  userId    Int
  lecture   Lecture @relation(fields: [lectureId], references: [id])
  user      Users   @relation(fields: [userId], references: [id])

  @@unique([lectureId, userId])
}

model LectureNotification {
  //고유 id
  id           Int       @id @default(autoincrement())
  //강의 id
  lectureId    Int       @unique
  //공지사항
  notification String    @db.VarChar(200)
  //수정일자
  updatedAt    DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt    DateTime? @db.Timestamp(6)
  lecture      Lecture   @relation(fields: [lectureId], references: [id])
}

model LectureImage {
  //고유 id
  id        Int     @id @default(autoincrement())
  //강의 id
  lectureId Int
  //이미지 url
  imageUrl  String
  lecture   Lecture @relation(fields: [lectureId], references: [id])
}

model LectureCoupon {
  id                           Int                            @id @default(autoincrement())
  //발급인
  lecturerId                   Int
  title                        String
  //할인율
  percentage                   Int?
  //할인 금액
  discountPrice                Int?
  //최대 할인 금액
  maxDiscountPrice             Int?
  //사용 제한 횟수
  maxUsageCount                Int?
  //사용 횟수
  usageCount                   Int                            @default(0)
  //쿠폰 비활성화
  isDisabled                   Boolean                        @default(false)
  isStackable                  Boolean
  //진행 기간
  startAt                      DateTime                       @db.Timestamp(6)
  endAt                        DateTime                       @db.Timestamp(6)
  createdAt                    DateTime                       @default(now()) @db.Timestamp(6)
  updatedAt                    DateTime                       @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt                    DateTime?                      @db.Timestamp(6)
  lecturer                     Lecturer                       @relation(fields: [lecturerId], references: [id])
  lectureCouponTarget          LectureCouponTarget[]
  temporaryLectureCouponTarget TemporaryLectureCouponTarget[]
  userCoupon                   UserCoupon[]
}

model LectureCouponTarget {
  id              Int           @id @default(autoincrement())
  lectureCouponId Int
  lectureId       Int
  lectureCoupon   LectureCoupon @relation(fields: [lectureCouponId], references: [id])
  lecture         Lecture       @relation(fields: [lectureId], references: [id])
}

model UserCoupon {
  id              Int           @id @default(autoincrement())
  //사용여부
  isUsed          Boolean       @default(false)
  userId          Int
  lectureCouponId Int
  createdAt       DateTime      @default(now()) @db.Timestamp(6)
  updatedAt       DateTime      @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt       DateTime?     @db.Timestamp(6)
  lectureCoupon   LectureCoupon @relation(fields: [lectureCouponId], references: [id])
  users           Users         @relation(fields: [userId], references: [id])
}

model Auth {
  id         Int       @id @default(autoincrement())
  userId     Int       @unique
  email      String    @unique
  signUpType Int
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  deletedAt  DateTime? @db.Timestamp(6)
  users      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LecturerRegion {
  id         Int      @id @default(autoincrement())
  regionId   Int
  lecturerId Int
  region     Region   @relation(fields: [regionId], references: [id])
  lecturer   Lecturer @relation(fields: [lecturerId], references: [id])
}

model LecturerDanceGenre {
  id              Int           @id @default(autoincrement())
  danceCategoryId Int
  lecturerId      Int
  name            String?
  danceCategory   DanceCategory @relation(fields: [danceCategoryId], references: [id])
  lecturer        Lecturer      @relation(fields: [lecturerId], references: [id])
}

model LecturerWebsiteUrl {
  id         Int      @id @default(autoincrement())
  lecturerId Int
  url        String
  lecturer   Lecturer @relation(fields: [lecturerId], references: [id])
}

model LecturerProfileImageUrl {
  id         Int      @id @default(autoincrement())
  lecturerId Int
  url        String
  lecturer   Lecturer @relation(fields: [lecturerId], references: [id])
}

model LectureSchedule {
  id                   Int      @id @default(autoincrement())
  lectureId            Int
  startDateTime        DateTime
  numberOfParticipants Int
  team                 String?
  lecture              Lecture  @relation(fields: [lectureId], references: [id])
}

model LectureToRegion {
  id        Int     @id @default(autoincrement())
  regionId  Int
  lectureId Int
  region    Region  @relation(fields: [regionId], references: [id])
  lecture   Lecture @relation(fields: [lectureId], references: [id])
}

model LectureToDanceGenre {
  id              Int           @id @default(autoincrement())
  danceCategoryId Int
  lectureId       Int
  name            String?
  danceCategory   DanceCategory @relation(fields: [danceCategoryId], references: [id])
  lecture         Lecture       @relation(fields: [lectureId], references: [id])
}

model LectureHoliday {
  id        Int      @id @default(autoincrement())
  lectureId Int
  holiday   DateTime
  lecture   Lecture  @relation(fields: [lectureId], references: [id])
}

model TemporaryLecture {
  //고유 id
  id                           Int                            @id @default(autoincrement())
  //강사 id
  lecturerId                   Int
  //작성 진행 단계
  step                         Int?
  //강의 종류 id
  lectureTypeId                Int?
  //강의 형식 id
  lectureMethodId              Int?
  //강의명
  title                        String?                        @db.VarChar(30)
  //강의 소개
  introduction                 String?                        @db.VarChar(500)
  //커리큘럼
  curriculum                   String?                        @db.Text
  //상세 주소
  detailAddress                String?                        @db.VarChar(30)
  //강의 시간
  duration                     Int?                           @db.Integer
  //난이도
  difficultyLevel              String?                        @db.VarChar(5)
  //최소 정원
  minCapacity                  Int?                           @db.Integer
  //최대 정원
  maxCapacity                  Int?                           @db.Integer
  //강의 예약 마감일
  reservationDeadline          DateTime?                      @db.Date
  //예약 설명
  reservationComment           String?                        @db.VarChar(255)
  //가격
  price                        Int?                           @db.Integer
  //선금
  noShowDeposit                Int?                           @db.Integer
  //리뷰 수
  reviewCount                  Int                            @default(0) @db.Integer
  //평점
  stars                        Int                            @default(0) @db.Integer
  //활성여부
  isActive                     Boolean                        @default(true) @db.Boolean
  //생성일자
  createdAt                    DateTime                       @default(now()) @db.Timestamp(6)
  //수정일자
  updatedAt                    DateTime                       @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt                    DateTime?                      @db.Timestamp(6)
  lecturer                     Lecturer                       @relation(fields: [lecturerId], references: [id])
  lectureType                  LectureType?                   @relation(fields: [lectureTypeId], references: [id])
  lectureMethod                LectureMethod?                 @relation(fields: [lectureMethodId], references: [id])
  temporaryLecturenotification TemporaryLectureNotification[]
  temporaryLectureImage        TemporaryLectureImage[]
  temporaryLectureCouponTarget TemporaryLectureCouponTarget[]
  temporaryLectureSchedule     TemporaryLectureSchedule[]
  temporaryLectureToRegion     TemporaryLectureToRegion[]
  temporaryLectureToDanceGenre TemporaryLectureToDanceGenre[]
  temporaryLectureHoliday      TemporaryLectureHoliday[]
}

model TemporaryLectureSchedule {
  id                   Int              @id @default(autoincrement())
  lectureId            Int
  startDateTime        DateTime?
  numberOfParticipants Int?
  team                 String?
  temporaryLecture     TemporaryLecture @relation(fields: [lectureId], references: [id])
}

model TemporaryLectureToRegion {
  id               Int              @id @default(autoincrement())
  regionId         Int?
  lectureId        Int
  region           Region?          @relation(fields: [regionId], references: [id])
  temporaryLecture TemporaryLecture @relation(fields: [lectureId], references: [id])
}

model TemporaryLectureToDanceGenre {
  id               Int               @id @default(autoincrement())
  danceCategoryId  Int?
  lectureId        Int
  name             String?
  danceCategory    DanceCategory?    @relation(fields: [danceCategoryId], references: [id])
  temporaryLecture TemporaryLecture? @relation(fields: [lectureId], references: [id])
}

model TemporaryLectureHoliday {
  id               Int              @id @default(autoincrement())
  lectureId        Int
  holiday          DateTime?
  temporaryLecture TemporaryLecture @relation(fields: [lectureId], references: [id])
}

model TemporaryLectureCouponTarget {
  id               Int              @id @default(autoincrement())
  lectureCouponId  Int?
  lectureId        Int
  lectureCoupon    LectureCoupon?   @relation(fields: [lectureCouponId], references: [id])
  temporaryLecture TemporaryLecture @relation(fields: [lectureId], references: [id])
}

model TemporaryLectureNotification {
  //고유 id
  id               Int              @id @default(autoincrement())
  //강의 id
  lectureId        Int              @unique
  //공지사항
  notification     String?          @db.VarChar(200)
  //수정일자
  updatedAt        DateTime         @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt        DateTime?        @db.Timestamp(6)
  temporaryLecture TemporaryLecture @relation(fields: [lectureId], references: [id])
}

model TemporaryLectureImage {
  //고유 id
  id               Int              @id @default(autoincrement())
  //강의 id
  lectureId        Int
  //이미지 url
  imageUrl         String?
  temporaryLecutre TemporaryLecture @relation(fields: [lectureId], references: [id])
}
