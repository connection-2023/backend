generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  //고유 id
  id                       Int                        @id @default(autoincrement())
  uuid                     String                     @default(uuid())
  //이름
  name                     String                     @db.VarChar(10)
  //사용자 닉네임
  nickname                 String                     @unique @db.VarChar(30)
  //사용 이메일
  email                    String                     @unique
  //프로필 공개 여부(open: true, close: false)
  isProfileOpen            Boolean                    @default(false) @db.Boolean
  //핸드폰 번호
  phoneNumber              String?                    @unique @db.VarChar(11)
  //성별
  gender                   Int?                       @db.SmallInt
  //생성일자
  createdAt                DateTime                   @default(now()) @db.Timestamp(6)
  //수정일자
  updatedAt                DateTime                   @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt                DateTime?                  @db.Timestamp(6)
  auth                     Auth?
  userProfileImage         UserProfileImage?
  lecturer                 Lecturer?
  lectureReview            LectureReview[]
  lecturerReview           LecturerReview[]
  likedLecture             LikedLecture[]
  dailySmsUsage            DailySmsUsage?
  userCoupon               UserCoupon[]
  payment                  Payment[]
  reservation              Reservation[]
  likedLectureReview       LikedLectureReview[]
  registerConsentAgreement RegisterConsentAgreement[]
    userPass        UserPass[]


}

model UserProfileImage {
  //고유 id
  id       Int     @id @default(autoincrement())
  //user id
  userId   Int     @unique
  //이미지 url
  imageUrl String? @db.VarChar(255)
  users    Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Region {
  //고유 id
  id                       Int                        @id @default(autoincrement())
  //시/도
  administrativeDistrict   String                     @db.VarChar(19)
  //시/군/구
  district                 String?                    @db.VarChar(10)
  lecturerRegion           LecturerRegion[]
  lectureToRegion          LectureToRegion[]
  temporaryLectureToRegion TemporaryLectureToRegion[]
}

model Lecturer {
  //고유 id
  id                       Int                        @id @default(autoincrement())
  //user id
  userId                   Int                        @unique
  //강사nickname
  nickname                 String                     @unique @db.VarChar(11)
  email                    String
  phoneNumber              String
  profileCardImageUrl      String?
  //개인 사이트 주소
  youtubeUrl               String?
  instagramUrl             String?
  homepageUrl              String?
  //강사 소속 팀, 크루
  affiliation              String?
  //강사 소개
  introduction             String
  //강사 경력,경험
  experience               String?
  //평점
  stars                    Int                        @default(0)
  //리뷰 수
  reviewCount              Int                        @default(0)
  //생성일자
  createdAt                DateTime                   @default(now()) @db.Timestamp(6)
  //수정일자
  updatedAt                DateTime                   @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt                DateTime?                  @db.Timestamp(6)
  users                    Users                      @relation(fields: [userId], references: [id])
  lecture                  Lecture[]
  temporaryLecture         TemporaryLecture[]
  lecturerReview           LecturerReview[]
  lectureCoupon            LectureCoupon[]
  //강사 활동 지역
  lecturerRegion           LecturerRegion[]
  //강사 강의 장르
  lecturerDanceGenre       LecturerDanceGenre[]
  //강사가 보여주고싶은 사이트들
  lecturerInstagramPostUrl LecturerInstagramPostUrl[]
  lecturerProfileImageUrl  LecturerProfileImageUrl[]
  payment                  Payment[]
  lecturePass             LecturePass[]
}

model Lecture {
  //고유 id
  id                  Int                   @id @default(autoincrement())
  //강사 id
  lecturerId          Int
  //강의 종류 id
  lectureTypeId       Int
  //강의 형식 id
  lectureMethodId     Int
  //강의 인원
  isGroup             Boolean
  startDate           DateTime
  endDate             DateTime
  //강의명
  title               String                @db.VarChar(30)
  //강의 소개
  introduction        String?               @db.VarChar(500)
  //커리큘럼
  curriculum          String                @db.Text
  //강의 시간
  duration            Int                   @db.Integer
  //난이도
  difficultyLevel     String                @db.VarChar(5)
  //최소 정원
  minCapacity         Int?                  @db.Integer
  //최대 정원
  maxCapacity         Int?                  @db.Integer
  //강의 예약 마감일
  reservationDeadline Int
  //예약 설명
  reservationComment  String?               @db.VarChar(255)
  //가격
  price               Int                   @db.Integer
  //선금
  noShowDeposit       Int?                  @db.Integer
  //리뷰 수
  reviewCount         Int                   @default(0) @db.Integer
  //평점
  stars               Int                   @default(0) @db.Integer
  //활성여부
  isActive            Boolean               @default(true) @db.Boolean
  locationDescription String?               @db.VarChar(300)
  //생성일자
  createdAt           DateTime              @default(now()) @db.Timestamp(6)
  //수정일자
  updatedAt           DateTime              @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt           DateTime?             @db.Timestamp(6)
  lecturer            Lecturer              @relation(fields: [lecturerId], references: [id])
  lectureType         LectureType           @relation(fields: [lectureTypeId], references: [id])
  lectureMethod       LectureMethod         @relation(fields: [lectureMethodId], references: [id])
  lectureReview       LectureReview[]
  likedLecture        LikedLecture[]
  lectureNotification LectureNotification?
  lectureImage        LectureImage[]
  lectureCouponTarget LectureCouponTarget[]
  lectureSchedule     LectureSchedule[]
  lectureToRegion     LectureToRegion[]
  lectureToDanceGenre LectureToDanceGenre[]
  lectureHoliday      LectureHoliday[]
  lectureLocation     LectureLocation?
  lecturePassTarget LecturePassTarget[]

}

model DanceCategory {
  //고유 id
  id                           Int                            @id @default(autoincrement())
  //장르(hiphop,locking)
  genre                        String
  lecturerDanceGenre           LecturerDanceGenre[]
  lectureToDanceGenre          LectureToDanceGenre[]
  temporaryLectureToDanceGenre TemporaryLectureToDanceGenre[]
}

model LectureType {
  //고유 id
  id               Int                @id @default(autoincrement())
  //강의 종류(dance,drawing)
  name             String
  lecture          Lecture[]
  temporaryLecture TemporaryLecture[]
}

model LectureReview {
  //고유 id
  id                 Int                  @id @default(autoincrement())
  //강의 id
  lectureId          Int
  //유저 id
  userId             Int
  //예약 id
  reservationId      Int                  @unique
  //별점
  stars              Int                  @db.Integer
  //후기
  description        String?              @db.VarChar(255)
  //생성일자
  createdAt          DateTime             @default(now()) @db.Timestamp(6)
  //수정일자
  updatedAt          DateTime             @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt          DateTime?            @db.Timestamp(6)
  lecture            Lecture              @relation(fields: [lectureId], references: [id])
  users              Users                @relation(fields: [userId], references: [id])
  reservation        Reservation          @relation(fields: [reservationId], references: [id])
  likedLectureReview LikedLectureReview[]
}

model LikedLectureReview {
  //고유 id
  id              Int           @id @default(autoincrement())
  //강의 id
  lectureReviewId Int
  //유저 id
  userId          Int
  lectureReview   LectureReview @relation(fields: [lectureReviewId], references: [id])
  user            Users         @relation(fields: [userId], references: [id])

  @@unique([lectureReviewId, userId])
}

model LecturerReview {
  //고유 id
  id          Int      @id @default(autoincrement())
  //강사 id
  lecturerId  Int
  //유저 id
  userId      Int
  //별점
  stars       Int      @db.Integer
  //후기
  description String?  @db.VarChar(255)
  lecturer    Lecturer @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
  users       Users    @relation(fields: [userId], references: [id])
}

model DailySmsUsage {
  //고유 id
  id             Int @id @default(autoincrement())
  userId         Int @unique
  dailySentCount Int @default(0) @db.Integer

  users Users @relation(fields: [userId], references: [id])
}

model LectureMethod {
  //고유 id
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  lecture          Lecture[]
  temporaryLecture TemporaryLecture[]
}

model LikedLecture {
  //고유 id
  id        Int     @id @default(autoincrement())
  //강의 id
  lectureId Int
  //유저 id
  userId    Int
  lecture   Lecture @relation(fields: [lectureId], references: [id])
  user      Users   @relation(fields: [userId], references: [id])

  @@unique([lectureId, userId])
}

model LectureNotification {
  //고유 id
  id           Int       @id @default(autoincrement())
  //강의 id
  lectureId    Int       @unique
  //공지사항
  notification String    @db.VarChar(200)
  //수정일자
  updatedAt    DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt    DateTime? @db.Timestamp(6)
  lecture      Lecture   @relation(fields: [lectureId], references: [id])
}

model LectureImage {
  //고유 id
  id        Int     @id @default(autoincrement())
  //강의 id
  lectureId Int
  //이미지 url
  imageUrl  String
  lecture   Lecture @relation(fields: [lectureId], references: [id])
}

model LectureCoupon {
  id                           Int                            @id @default(autoincrement())
  //발급인
  lecturerId                   Int
  title                        String
  //할인율
  percentage                   Int?
  //할인 금액
  discountPrice                Int?
  //최대 할인 금액
  maxDiscountPrice             Int?
  //사용 제한 횟수
  maxUsageCount                Int?
  //사용 횟수
  usageCount                   Int                            @default(0)
  //쿠폰 비활성화
  isDisabled                   Boolean                        @default(false)
  isStackable                  Boolean
  isPrivate                    Boolean
  //진행 기간
  startAt                      DateTime                       @db.Timestamp(6)
  endAt                        DateTime                       @db.Timestamp(6)
  createdAt                    DateTime                       @default(now()) @db.Timestamp(6)
  updatedAt                    DateTime                       @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt                    DateTime?                      @db.Timestamp(6)
  lecturer                     Lecturer                       @relation(fields: [lecturerId], references: [id])
  lectureCouponTarget          LectureCouponTarget[]
  temporaryLectureCouponTarget TemporaryLectureCouponTarget[]
  userCoupon                   UserCoupon[]
  paymentCouponUsages          PaymentCouponUsage[]           @relation("Coupon")
  stackableCouponUsages        PaymentCouponUsage[]           @relation("StackableCoupon")
}

model LectureCouponTarget {
  id              Int           @id @default(autoincrement())
  lectureCouponId Int
  lectureId       Int
  lectureCoupon   LectureCoupon @relation(fields: [lectureCouponId], references: [id])
  lecture         Lecture       @relation(fields: [lectureId], references: [id])

  @@unique([lectureId, lectureCouponId])
}

model UserCoupon {
  id              Int           @id @default(autoincrement())
  //사용여부
  isUsed          Boolean       @default(false)
  userId          Int
  lectureCouponId Int
  createdAt       DateTime      @default(now()) @db.Timestamp(6)
  updatedAt       DateTime      @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt       DateTime?     @db.Timestamp(6)
  lectureCoupon   LectureCoupon @relation(fields: [lectureCouponId], references: [id])
  users           Users         @relation(fields: [userId], references: [id])

  @@unique([userId, lectureCouponId])
}

model Auth {
  id         Int       @id @default(autoincrement())
  userId     Int       @unique
  email      String    @unique
  signUpType Int
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  deletedAt  DateTime? @db.Timestamp(6)
  users      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LecturerRegion {
  id         Int      @id @default(autoincrement())
  regionId   Int
  lecturerId Int
  region     Region   @relation(fields: [regionId], references: [id])
  lecturer   Lecturer @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
}

model LecturerDanceGenre {
  id              Int           @id @default(autoincrement())
  danceCategoryId Int
  lecturerId      Int
  name            String?
  danceCategory   DanceCategory @relation(fields: [danceCategoryId], references: [id])
  lecturer        Lecturer      @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
}

model LecturerInstagramPostUrl {
  id         Int      @id @default(autoincrement())
  lecturerId Int
  url        String
  lecturer   Lecturer @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
}

model LecturerProfileImageUrl {
  id         Int      @id @default(autoincrement())
  lecturerId Int
  url        String
  lecturer   Lecturer @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
}

model LectureSchedule {
  id                   Int           @id @default(autoincrement())
  lectureId            Int
  day                  String[]      @default([])
  startDateTime        DateTime
  endDateTime          DateTime
  numberOfParticipants Int
  lecture              Lecture       @relation(fields: [lectureId], references: [id])
  reservation          Reservation[]
}

model LectureToRegion {
  id        Int     @id @default(autoincrement())
  regionId  Int
  lectureId Int
  region    Region  @relation(fields: [regionId], references: [id])
  lecture   Lecture @relation(fields: [lectureId], references: [id])
}

model LectureToDanceGenre {
  id              Int           @id @default(autoincrement())
  danceCategoryId Int
  lectureId       Int
  name            String?
  danceCategory   DanceCategory @relation(fields: [danceCategoryId], references: [id])
  lecture         Lecture       @relation(fields: [lectureId], references: [id])
}

model LectureHoliday {
  id        Int      @id @default(autoincrement())
  lectureId Int
  holiday   DateTime
  lecture   Lecture  @relation(fields: [lectureId], references: [id])
}

model TemporaryLecture {
  //고유 id
  id                           Int                            @id @default(autoincrement())
  //강사 id
  lecturerId                   Int
  //작성 진행 단계
  step                         Int?
  //강의 종류 id
  lectureTypeId                Int?
  //강의 형식 id
  lectureMethodId              Int?
  //강의 인원
  isGroup                      Boolean?
  startDate                    DateTime?
  endDate                      DateTime?
  //강의명
  title                        String?                        @db.VarChar(30)
  //강의 소개
  introduction                 String?                        @db.VarChar(500)
  //커리큘럼
  curriculum                   String?                        @db.Text
  //강의 시간
  duration                     Int?                           @db.Integer
  //난이도
  difficultyLevel              String?                        @db.VarChar(5)
  //최소 정원
  minCapacity                  Int?                           @db.Integer
  //최대 정원
  maxCapacity                  Int?                           @db.Integer
  //강의 예약 마감일
  reservationDeadline          Int?
  //예약 설명
  reservationComment           String?                        @db.VarChar(255)
  //가격
  price                        Int?                           @db.Integer
  //선금
  noShowDeposit                Int?                           @db.Integer
  locationDescription          String?                        @db.VarChar(300)
  //생성일자
  createdAt                    DateTime                       @default(now()) @db.Timestamp(6)
  //수정일자
  updatedAt                    DateTime                       @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt                    DateTime?                      @db.Timestamp(6)
  lecturer                     Lecturer                       @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
  lectureType                  LectureType?                   @relation(fields: [lectureTypeId], references: [id])
  lectureMethod                LectureMethod?                 @relation(fields: [lectureMethodId], references: [id])
  temporaryLecturenotification TemporaryLectureNotification?
  temporaryLectureImage        TemporaryLectureImage[]
  temporaryLectureCouponTarget TemporaryLectureCouponTarget[]
  temporaryLectureSchedule     TemporaryLectureSchedule[]
  temporaryLectureToRegion     TemporaryLectureToRegion[]
  temporaryLectureToDanceGenre TemporaryLectureToDanceGenre[]
  temporaryLectureHoliday      TemporaryLectureHoliday[]
  temporaryLectureDay          TemporaryLectureDay[]
  temporaryLectureLocation     TemporaryLectureLocation?
}

model TemporaryLectureSchedule {
  id                   Int              @id @default(autoincrement())
  lectureId            Int
  date                 String?
  startDateTime        String?
  numberOfParticipants Int?
  temporaryLecture     TemporaryLecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)
}

model TemporaryLectureToRegion {
  id               Int              @id @default(autoincrement())
  regionId         Int?
  lectureId        Int
  region           Region?          @relation(fields: [regionId], references: [id])
  temporaryLecture TemporaryLecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)
}

model TemporaryLectureToDanceGenre {
  id               Int               @id @default(autoincrement())
  danceCategoryId  Int?
  lectureId        Int
  name             String?
  danceCategory    DanceCategory?    @relation(fields: [danceCategoryId], references: [id])
  temporaryLecture TemporaryLecture? @relation(fields: [lectureId], references: [id], onDelete: Cascade)
}

model TemporaryLectureHoliday {
  id               Int              @id @default(autoincrement())
  lectureId        Int
  holiday          DateTime?
  temporaryLecture TemporaryLecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)
}

model TemporaryLectureCouponTarget {
  id               Int              @id @default(autoincrement())
  lectureCouponId  Int?
  lectureId        Int
  lectureCoupon    LectureCoupon?   @relation(fields: [lectureCouponId], references: [id])
  temporaryLecture TemporaryLecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)
}

model TemporaryLectureNotification {
  //고유 id
  id               Int              @id @default(autoincrement())
  //강의 id
  lectureId        Int              @unique
  //공지사항
  notification     String?          @db.VarChar(200)
  //수정일자
  updatedAt        DateTime         @default(now()) @updatedAt @db.Timestamp(6)
  //삭제일자
  deletedAt        DateTime?        @db.Timestamp(6)
  temporaryLecture TemporaryLecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)
}

model TemporaryLectureImage {
  //고유 id
  id               Int              @id @default(autoincrement())
  //강의 id
  lectureId        Int
  //이미지 url
  imageUrl         String?
  temporaryLecutre TemporaryLecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)
}

//강의 결제내역
model Payment {
  id                        Int                        @id @default(autoincrement())
  paymentKey                String?
  paymentProductTypeId      Int
  orderId                   String                     @unique
  orderName                 String
  //가격
  price                     Int                        @db.Integer
  userId                    Int?
  lecturerId                Int?
  paymentMethodId           Int?
  statusId                  Int
  createdAt                 DateTime                   @default(now()) @db.Timestamp(6)
  updatedAt                 DateTime                   @default(now()) @updatedAt @db.Timestamp(6)
  user                      Users?                     @relation(fields: [userId], references: [id])
  lecturer                  Lecturer?                  @relation(fields: [lecturerId], references: [id])
  paymentStatus             PaymentStatus              @relation(fields: [statusId], references: [id])
  paymentMethod             PaymentMethod?             @relation(fields: [paymentMethodId], references: [id])
  paymentProductType        PaymentProductType         @relation(fields: [paymentProductTypeId], references: [id])
  reservation               Reservation[]
  paymentCouponUsage        PaymentCouponUsage?
  cardPaymentInfo           CardPaymentInfo?
  virtualAccountPaymentInfo VirtualAccountPaymentInfo?
}

//결제 방식
model PaymentMethod {
  id      Int       @id @default(autoincrement())
  name    String
  payment Payment[]
}

//결제 상태
model PaymentStatus {
  id      Int       @id @default(autoincrement())
  name    String
  payment Payment[]
}

//쿠폰 사용 내역 쿠폰 수정 대비
model PaymentCouponUsage {
  id                              Int            @id @default(autoincrement())
  paymentId                       Int            @unique
  couponId                        Int?
  couponTitle                     String?
  couponPercentage                Int?
  couponDiscountPrice             Int?
  couponMaxDiscountPrice          Int?
  stackableCouponId               Int?
  stackableCouponTitle            String?
  stackableCouponPercentage       Int?
  stackableCouponDiscountPrice    Int?
  stackableCouponMaxDiscountPrice Int?
  payment                         Payment        @relation(fields: [paymentId], references: [id])
  coupon                          LectureCoupon? @relation("Coupon", fields: [couponId], references: [id])
  stackableCoupon                 LectureCoupon? @relation("StackableCoupon", fields: [stackableCouponId], references: [id])
}

model PaymentProductType {
  id      Int       @id @default(autoincrement())
  name    String
  payment Payment[]
}

//예약 정보
model Reservation {
  id                Int             @id @default(autoincrement())
  userId            Int
  paymentId         Int
  lectureScheduleId Int
  //대표자
  representative    String
  phoneNumber       String
  //예약 인원
  participants      Int
  //예약 요청사항
  requests          String?
  user              Users           @relation(fields: [userId], references: [id])
  lectureSchedule   LectureSchedule @relation(fields: [lectureScheduleId], references: [id])
  payment           Payment         @relation(fields: [paymentId], references: [id])
  lectureReview     LectureReview?
}

//카드 결제 시 저장되는 정보
model CardPaymentInfo {
  id                    Int     @id @default(autoincrement())
  paymentId             Int     @unique
  issuerCode            String
  acquirerCode          String?
  number                String
  //할부
  installmentPlanMonths Int
  approveNo             String
  cardType              String
  ownerType             String
  isInterestFree        Boolean
  payment               Payment @relation(fields: [paymentId], references: [id])
  issuer                Card    @relation("Issure", fields: [issuerCode], references: [code])
  acquirer              Card?   @relation("Acquirer", fields: [acquirerCode], references: [code])
}

//카드사 정보
model Card {
  code         String            @id
  name         String
  krCode       String
  enCode       String
  issureCard   CardPaymentInfo[] @relation("Issure")
  acquirerCard CardPaymentInfo[] @relation("Acquirer")
}

//가상계좌 결제정보
model VirtualAccountPaymentInfo {
  id                   Int                   @id @default(autoincrement())
  paymentId            Int                   @unique
  refundStatusId       Int
  accountNumber        String
  bankCode             String
  customerName         String
  dueDate              DateTime
  expired              Boolean
  payment              Payment               @relation(fields: [paymentId], references: [id])
  bank                 Bank                  @relation(fields: [bankCode], references: [code])
  refundStatus         RefundStatus          @relation(fields: [refundStatusId], references: [id])
  refundReceiveAccount RefundReceiveAccount?
}

//환불계좌 정보
model RefundReceiveAccount {
  id                          Int                       @id @default(autoincrement())
  virtualAccountPaymentInfoId Int                       @unique
  bankCode                    String
  createdAt                   DateTime                  @default(now()) @db.Timestamp(6)
  updatedAt                   DateTime                  @default(now()) @updatedAt @db.Timestamp(6)
  virtualAccountPaymentInfo   VirtualAccountPaymentInfo @relation(fields: [virtualAccountPaymentInfoId], references: [id])
  bank                        Bank                      @relation(fields: [bankCode], references: [code])
}

model Bank {
  code                      String                      @id
  name                      String
  kftCode                   String
  krCode                    String
  enCode                    String
  virtualAccountPaymentInfo VirtualAccountPaymentInfo[]
  refundReceiveAccount      RefundReceiveAccount[]
}

model RefundStatus {
  id                        Int                         @id @default(autoincrement())
  name                      String
  virtualAccountPaymentInfo VirtualAccountPaymentInfo[]
}

model TemporaryLectureDay {
  id                          Int                           @id @default(autoincrement())
  lectureId                   Int
  day                         String[]                      @default([])
  temporaryLecture            TemporaryLecture              @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  temporaryLectureDaySchedule TemporaryLectureDaySchedule[]
}

model TemporaryLectureDaySchedule {
  id                  Int                 @id @default(autoincrement())
  lectureDayId        Int
  startDateTime       String?
  temporaryLectureDay TemporaryLectureDay @relation(fields: [lectureDayId], references: [id], onDelete: Cascade)
}

model LectureLocation {
  id            Int     @id @default(autoincrement())
  lectureId     Int     @unique
  address       String
  //상세주소
  detailAddress String
  //건물명
  buildingName  String
  lecture       Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)
}

model TemporaryLectureLocation {
  id               Int              @id @default(autoincrement())
  lectureId        Int              @unique
  address          String?
  //상세주소
  detailAddress    String?
  //건물명
  buildingName     String?
  temporaryLecture TemporaryLecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)
}

model RegisterConsent {
  id                       Int                        @id @default(autoincrement())
  name                     String
  description              String
  required                 Boolean
  registerConsentAgreement RegisterConsentAgreement[]
}

model RegisterConsentAgreement {
  id                Int             @id @default(autoincrement())
  registerConsentId Int
  userId            Int
  registerConsent   RegisterConsent @relation(fields: [registerConsentId], references: [id])
  user              Users           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([registerConsentId, userId])
}
model LecturePass {
  id                           Int                            @id @default(autoincrement())
  lecturerId                   Int
  title                        String
  price                        Int
  maxUsage                      Int
  availableMonths             Int
  //진행 기간
  startAt                      DateTime                       @db.Timestamp(6)
  endAt                        DateTime                       @db.Timestamp(6)
  createdAt                    DateTime                       @default(now()) @db.Timestamp(6)
  updatedAt                    DateTime                       @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt                    DateTime?                      @db.Timestamp(6)
  lecturer                     Lecturer                       @relation(fields: [lecturerId], references: [id])
  lecturePassTarget LecturePassTarget[]
  userPass UserPass[]
}

model LecturePassTarget {
  id              Int           @id @default(autoincrement())
  lectureId       Int
  lecturePassId Int
  lecture         Lecture       @relation(fields: [lectureId], references: [id])
  lecturePass   LecturePass @relation(fields: [lecturePassId], references: [id])

  @@unique([lectureId, lecturePassId])
}

model UserPass {
  id              Int           @id @default(autoincrement())
  isUsed          Boolean       @default(false)
  userId          Int
  lecturePassId Int
  createdAt       DateTime      @default(now()) @db.Timestamp(6)
  updatedAt       DateTime      @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt       DateTime?     @db.Timestamp(6)
  users           Users         @relation(fields: [userId], references: [id])
  lecturePass   LecturePass @relation(fields: [lecturePassId], references: [id])

  @@unique([userId, lecturePassId])
}


